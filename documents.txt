# Техническая документация импортируемых библиотек
# Terraria Auto-Fishing Bot
# (C) 2025 Goncharov Ivan

================================================================================
                            СОДЕРЖАНИЕ
================================================================================

1. OpenCV-Python (cv2)
2. MSS (Multiple Screen Shot)
3. PyAutoGUI
4. PyTesseract
5. NumPy
6. FuzzyWuzzy
7. Стандартные библиотеки Python

================================================================================
                            1. OpenCV-Python (cv2)
================================================================================

OpenCV (Open Source Computer Vision Library) - библиотека компьютерного зрения
для обработки изображений и видео.

ИСПОЛЬЗУЕМЫЕ ФУНКЦИИ:

cv2.cvtColor(src, code)
    Преобразует цветовое пространство изображения
    Параметры:
        src - исходное изображение
        code - код преобразования (cv2.COLOR_BGR2HSV, cv2.COLOR_BGR2RGB)
    Возвращает: преобразованное изображение
    Применение в проекте: конвертация BGR в HSV для анализа цвета удочки

cv2.inRange(src, lowerb, upperb)
    Создает бинарную маску для пикселей в заданном диапазоне
    Параметры:
        src - исходное изображение в HSV
        lowerb - нижняя граница диапазона (numpy array)
        upperb - верхняя граница диапазона (numpy array)
    Возвращает: бинарную маску (0 или 255)
    Применение в проекте: создание маски для желтого цвета золотой удочки

cv2.imshow(winname, mat)
    Отображает изображение в окне
    Параметры:
        winname - название окна (строка)
        mat - изображение для отображения
    Применение в проекте: показ области анализа и маски пользователю

cv2.waitKey(delay)
    Ожидает нажатие клавиши
    Параметры:
        delay - время ожидания в миллисекундах (0 = бесконечно)
    Возвращает: код нажатой клавиши
    Применение в проекте: обработка нажатия 'q' для выхода

cv2.destroyAllWindows()
    Закрывает все окна OpenCV
    Применение в проекте: очистка ресурсов при выходе

ЦВЕТОВЫЕ МОДЕЛИ:
    BGR - Blue, Green, Red (по умолчанию в OpenCV)
    HSV - Hue, Saturation, Value (удобно для анализа цвета)
    RGB - Red, Green, Blue (стандарт для большинства приложений)

================================================================================
                            2. MSS (Multiple Screen Shot)
================================================================================

MSS - кроссплатформенная библиотека для создания скриншотов экрана.

ИСПОЛЬЗУЕМЫЕ КЛАССЫ И МЕТОДЫ:

mss.mss()
    Создает объект для работы со скриншотами
    Возвращает: экземпляр класса MSSBase
    Применение в проекте: self.sct = mss.mss()

mss_instance.grab(monitor)
    Создает скриншот указанной области экрана
    Параметры:
        monitor - словарь с координатами области:
            {
                "left": int,    # X координата левого верхнего угла
                "top": int,     # Y координата левого верхнего угла
                "width": int,   # Ширина области
                "height": int   # Высота области
            }
    Возвращает: объект ScreenShot
    Применение в проекте: захват области вокруг курсора для анализа

ОСОБЕННОСТИ:
    - Высокая производительность
    - Кроссплатформенность (Windows, macOS, Linux)
    - Возможность захвата конкретных областей экрана
    - Возвращает изображение в формате BGRA

================================================================================
                            3. PyAutoGUI
================================================================================

PyAutoGUI - библиотека для автоматизации GUI (графического интерфейса).

ИСПОЛЬЗУЕМЫЕ ФУНКЦИИ:

pyautogui.mouseDown(button='left')
    Нажимает кнопку мыши (удерживает)
    Параметры:
        button - кнопка мыши ('left', 'right', 'middle')
    Применение в проекте: начало клика для заброса/подсечки

pyautogui.mouseUp(button='left')
    Отпускает кнопку мыши
    Параметры:
        button - кнопка мыши ('left', 'right', 'middle')
    Применение в проекте: завершение клика

pyautogui.click(x=None, y=None, clicks=1, interval=0.0, button='left')
    Выполняет полный клик мыши
    Параметры:
        x, y - координаты клика (None = текущая позиция)
        clicks - количество кликов
        interval - интервал между кликами
        button - кнопка мыши
    Альтернатива: можно использовать вместо mouseDown/mouseUp

ЗАЩИТНЫЕ МЕХАНИЗМЫ:
    - pyautogui.FAILSAFE = True (по умолчанию)
    - Перемещение мыши в угол экрана останавливает выполнение
    - pyautogui.PAUSE - пауза между действиями

================================================================================
                            4. PyTesseract
================================================================================

PyTesseract - Python обертка для Tesseract OCR движка.

ИСПОЛЬЗУЕМЫЕ ФУНКЦИИ:

pytesseract.pytesseract.tesseract_cmd
    Путь к исполняемому файлу Tesseract
    Тип: строка

pytesseract.image_to_string(image, lang=None, config='')
    Извлекает текст из изображения
    Параметры:
        image - изображение (PIL Image, numpy array)
        lang - язык распознавания ('rus', 'eng', 'rus+eng')
        config - дополнительные параметры Tesseract
    Возвращает: распознанный текст (строка)

ПАРАМЕТРЫ КОНФИГУРАЦИИ (PSM - Page Segmentation Mode):
    --psm 6: Uniform block of text (единый блок текста)
    --psm 7: Single text line (одна строка текста)
    --psm 8: Single word (одно слово)
    --psm 13: Raw line. Treat the image as a single text line

ЯЗЫКИ:
    'rus' - русский
    'eng' - английский
    'rus+eng' - русский + английский

ТРЕБОВАНИЯ:
    - Установленный Tesseract OCR
    - Правильно указанный путь к tesseract.exe
    - Качественное изображение для распознавания

================================================================================
                            5. NumPy
================================================================================

NumPy - библиотека для работы с многомерными массивами и математическими операциями.

ИСПОЛЬЗУЕМЫЕ ФУНКЦИИ:

numpy.array(object, dtype=None)
    Создает массив NumPy
    Параметры:
        object - данные для массива (список, кортеж)
        dtype - тип данных
    Возвращает: ndarray
    Применение в проекте: создание границ цветового диапазона

numpy.asarray(a, dtype=None)
    Преобразует входные данные в массив
    Параметры:
        a - входные данные
        dtype - желаемый тип данных
    Возвращает: ndarray
    Применение в проекте: конвертация скриншота MSS в массив

numpy.sum(a, axis=None)
    Вычисляет сумму элементов массива
    Параметры:
        a - входной массив
        axis - ось суммирования (None = все элементы)
    Возвращает: сумма элементов
    Применение в проекте: подсчет пикселей в маске удочки

ТИПЫ ДАННЫХ:
    uint8 - беззнаковое 8-битное целое (0-255) - стандарт для изображений
    int32 - 32-битное целое со знаком
    float64 - 64-битное число с плавающей точкой

ПРИМЕНЕНИЕ В КОМПЬЮТЕРНОМ ЗРЕНИИ:
    - Изображения представляются как 3D массивы (высота, ширина, каналы)
    - Маски - как 2D массивы (высота, ширина)
    - Эффективные математические операции над пикселями

================================================================================
                            6. FuzzyWuzzy
================================================================================

FuzzyWuzzy - библиотека для нечеткого сравнения строк.

ИСПОЛЬЗУЕМЫЕ ФУНКЦИИ:

fuzz.ratio(s1, s2)
    Вычисляет процент сходства между двумя строками
    Параметры:
        s1 - первая строка
        s2 - вторая строка
    Возвращает: процент сходства (0-100)
    Применение в проекте: сравнение распознанного текста со словом "ящик"

АЛГОРИТМЫ СРАВНЕНИЯ:
    ratio() - базовое сравнение
    partial_ratio() - частичное сравнение
    token_sort_ratio() - сравнение с сортировкой токенов
    token_set_ratio() - сравнение множеств токенов

ПРИМЕНЕНИЕ:
    - Компенсация ошибок OCR распознавания
    - Поиск похожих слов при неточном распознавании
    - Пороговое значение 50% для определения совпадения

================================================================================
                            7. Стандартные библиотеки Python
================================================================================

time
    Функции для работы со временем

    time.time()
        Возвращает: текущее время в секундах с эпохи Unix

    time.sleep(seconds)
        Приостанавливает выполнение на указанное время
        Параметры: seconds - время в секундах (float)

logging
    Система логирования Python

    logging.basicConfig(level=logging.INFO)
        Настраивает базовую конфигурацию логирования
        Параметры: level - уровень логирования

configparser
    Парсер конфигурационных файлов

    ConfigParser()
        Создает объект для чтения INI файлов
        Методы:
            read(filename) - читает файл конфигурации
            sections() - возвращает список секций
            items(section) - возвращает пары ключ-значение

ctypes
    Интерфейс для вызова функций из динамических библиотек

    windll.user32.GetCursorPos(byref(pt))
        Получает координаты курсора мыши (Windows API)
        Параметры: pt - указатель на структуру POINT
        Применение: определение позиции мыши для анализа

    Structure
        Базовый класс для создания C-структур
        Применение: создание структуры POINT для координат

================================================================================
                            АРХИТЕКТУРНЫЕ РЕШЕНИЯ
================================================================================

ВЫБОР БИБЛИОТЕК:

1. OpenCV vs PIL/Pillow:
   + Более мощные инструменты компьютерного зрения
   + Встроенная поддержка HSV цветовой модели
   + Высокая производительность

2. MSS vs PyAutoGUI.screenshot():
   + Более высокая скорость захвата
   + Возможность захвата конкретных областей
   + Меньшее потребление ресурсов

3. PyTesseract vs другие OCR:
   + Бесплатное решение
   + Хорошая поддержка русского языка
   + Настраиваемые параметры распознавания

4. FuzzyWuzzy vs точное сравнение:
   + Компенсация ошибок OCR
   + Устойчивость к шумам в тексте
   + Гибкость в настройке порога совпадения

ОПТИМИЗАЦИИ:

- Использование HSV для анализа цвета (устойчивость к освещению)
- Ограничение области анализа (повышение производительности)
- Кэширование объектов (MSS instance)
- Минимальные интервалы между операциями

================================================================================
                            ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ
================================================================================

# Создание маски для желтого цвета
hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
yellow_lower = np.array([20, 100, 100])
yellow_upper = np.array([30, 255, 255])
mask = cv2.inRange(hsv, yellow_lower, yellow_upper)

# Захват области экрана
sct = mss.mss()
monitor = {"left": 100, "top": 100, "width": 200, "height": 200}
screenshot = sct.grab(monitor)
img_array = np.asarray(screenshot)

# OCR распознавание
rgb_image = cv2.cvtColor(img_array, cv2.COLOR_BGR2RGB)
text = pytesseract.image_to_string(rgb_image, lang='rus', config='--psm 6')

# Нечеткое сравнение строк
similarity = fuzz.ratio(recognized_text.lower(), 'ящик')
if similarity > 50:
    print("Найден ящик!")
